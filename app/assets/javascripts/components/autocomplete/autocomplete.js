//= require accessible-autocomplete/dist/accessible-autocomplete.min

(() => {

  /*
  Autocomplete
  ============

  See docs/components/autocomplete.md for full documentation.
  */

  const initializeAutocomplete = () => {
    // Set up an individual autocomplete field
    const initializeElement = element => {
      const {
        // Text given to the autogenerated label
        autocompleteLabelText: labelText,

        // Classes applied to the autogenerated label
        autocompleteLabelClass: labelClass,

        // id attribute for the autocomplete field
        autocompleteElementId: elementId,

        // name attribute for the autcomplete field
        autocompleteElementName: elementName,

        // The format applied to result suggestions with fields substituted
        autocompleteTemplateSuggestion: suggestionTemplate,

        // The key from the result object to use as the autocomplete field value
        autocompleteTemplateInput: valueKey,

        // The URL to query suggestions from {{QUERY}} will be substituted with the autocomplete field value
        autocompleteQueryUrl: queryUrl,

        // The default value of the autocomplete field before searching
        autocompleteDefaultValue: defaultValue,

        // key,value map of input name to result value and optional default value, each will become a hidden field on the form
        autocompleteHiddenFields: hiddenFieldsRaw
      } = element.dataset;

      // Set up the required markup to make the autocomplete element function
      // and fit in with govuk style standards
      const setupFormGroupAndLabel = () => {
        const formGroup = document.createElement('div');
        formGroup.classList.add('govuk-form-group');

        const formLabel = document.createElement('label');
        formLabel.classList.add('govuk-label');
        (labelClass || "")
          .split(" ")
          .forEach(klass => formLabel.classList.add(klass));
        formLabel.setAttribute('for', elementId);
        formLabel.textContent = labelText;

        const currentElementParent = element.parentNode;
        currentElementParent.replaceChild(formGroup, element);

        formGroup.appendChild(formLabel);
        formGroup.appendChild(element);
      }

      // Query an endpoint to return autocomplete choices
      const doQueryLookup = (query, populateResults) => {
        // Interpolate the user entered query into the provided query url
        const formattedQueryUrl = decodeURI(queryUrl)
          .replace("{{QUERY}}", query)

        fetch(formattedQueryUrl)
          .then(response => response.json())
          .then(populateResults);
      }

      // Format the autocomplete choice
      const formatSuggestion = (suggestion, template) => {
        // Allow defaultValue to display
        if (_.isString(suggestion)) {
          return suggestion;
        }

        output = template;

        Object.entries(suggestion).forEach(([key, value]) => {
          output = output.replace(new RegExp(`{{${key}}}`, 'g'), value);
        });

        return `<span class="govuk-body">${output}</span>`;
      }

      // Set the hidden field values on selection of suggestion
      const setHiddenFields = (result) => {
        if (result === undefined) return;
        if (hiddenFieldsRaw === null) return;

        const hiddenFieldsMap = JSON.parse(hiddenFieldsRaw);

        Object.entries(hiddenFieldsMap).forEach(([fieldName, keyOrKeyAndDefault]) => {
          const key = Array.isArray(keyOrKeyAndDefault) ? keyOrKeyAndDefault[0] : keyOrKeyAndDefault
          const hiddenField = document.querySelector(`input[name="${fieldName}"]`);
          hiddenField.value = result[key];
        });
      }

      // Construct the autocomplete initialization settings
      const settings = {
        element,
        id: elementId,
        name: elementName,
        minLength: 3,
        defaultValue: defaultValue,
        templates: {
          inputValue: i => i ? i[valueKey] : undefined,
          suggestion: i => formatSuggestion(i, suggestionTemplate)
        },
        source: _.throttle(doQueryLookup),
        onConfirm: setHiddenFields
      }

      setupFormGroupAndLabel();

      // Initialize the autocomplete dependency
      accessibleAutocomplete(settings);
    }

    // Initialize each element with data-component set to autocomplete
    const elements = document.querySelectorAll('[data-component="autocomplete"]');
    elements.forEach(initializeElement);
  }

  document.addEventListener('DOMContentLoaded', initializeAutocomplete);

})();
